¿Qué es Django y por qué se usa?*
Django es un framework web de Python de alto nivel para desarrollar sitios web fomentando el diseño limpio y el práctico, es decir 
es como un paquete de herramientas que ayuda a los desarrolladores a crear sitios web dinámicos, escalables de una 
manera rapida y eficiente.  Esas herramientas proporcionan por ejemplo la creación de plantillas,
la gestión de bases de datos, la autenticación de usuarios, y el enrutamiento de URL, entre otros.


*Explica brevemente el patrón MVC (Modelo-Vista-Controlador) y cómo se implementa en Django.*

El patron MVC permite separar los componentes de nuestra aplicación dependiendo de la responsabilidad que tienen, esto 
significa que cuando hacemos un cambio en alguna parte de nuestro código, esto no afecte otra parte del mismo. Ya que una de
sus caracteristicas es que es escalable. Principales componentes:

Modelo: Representa la lógica de datos y la base de datos.
Vista: Son la representación visual de los datos, representa la interfaz de usuario.
Controlador: Recibe las órdenes del usuario y se encarga de solicitar los datos al modelo y de comunicárselos a la vista. 

En Django, se utiliza una variante llamada MTV (Modelo-Template-Vista):

Modelo: Define la estructura de los datos (equivale al Modelo).
Template: Se encarga de la presentación (equivale a la Vista).
Vista: Controla la lógica de negocio y las interacciones (equivale al Controlador).

*qué es un modelo en Django y cómo se define?* 

Como se habia mencionado anteriormente, representa una tabla en la base de datos. Son una forma única y poderosa de 
interactuar con su base de datos, 
utilizando un código SQL mínimo y al mismo tiempo proporcionan un alto nivel de abstracción para manipular sus datos.
 
 Como se define:
    Para definir un modelo en Django, sigues estos pasos:

    1. Primero debemos que importar el módulo models desde django.db.
    2. Despues es Crear una clase que hereda de models.Model.
    3. Dentro de esta clase, se define las variables de clase que representan los campos de la tabla.
    4. Opcional: Se Puede agregar métodos y metadata al modelo.
    Ejemplo: 
        from django.db import models

        class PostUser(models.Model):
            title = models.CharField(max_length=200)
            content = models.TextField()
            author = models.CharField(max_length=100)
            created_date = models.DateTimeField(auto_now_add=True)
            published_date = models.DateTimeField()

            def __str__(self):
                return self.title

            def get_absolute_url(self):
                return reverse('post-detail', args=[str(self.id)])

 -------------------------------------------------------------------------------------------------------------------------
2. Qué es un diccionario en Python y cómo se diferencia de una lista*

    Un diccionario es una estructura de datos(colección) de pares clave-valor, las claves son unicas y deben ser 
    immutables (como cadenas, numeros enteros, tuplas), se accede a los valores mediate si clave.

    Diferencia de una lista: 
    
        1. una lista usa corchetes [] y un diccionario usa llaves {}

        2.Indice vs clave:
            En una lista, se accede a los elementos, mientras que en un diccionario, se accede a los valores mediante su clave.

        3. Orden: 
            las listas mantienen el orden de inserccion de los elementos, mientras que los.diccionarios no tienen un orden predeterminado.
    
        4. Claves unicas: 
            en un diccionario, las claves deben ser unicas, mientras que en una lista, no hay restrictions sobre la 
            unicidad de los elementos 
        
        5. Modificación de elementos:
            Las listas permiten insertar o eliminar elementos en cualquier posición.
            Los diccionarios solo permiten agregar o eliminar pares clave-valor

*Explica la diferencia entre append() y extend() en una lista de Python.*

    Append:  Es un método que tiene toda lista de Python el cual permite agregar un elemento al final de la lista. 
        No retorna ningún elemento ni valor, además, acepta cualquier tipo de valor como elemento a 
        agregar: número, cadena, lista, diccionario, objeto, etc.

    extend: Es un método permite agregar todos los elementos de un iterable(lista, tupla, cadena, etc) al final de una lista, 
            lo que permite unir 2 listas.

*Qué es un decorador en Python? Proporciona un ejemplo simple*

    Un decorador es una función especial que modifica o envuelve otra función. Se usa comúnmente para agregar funcionalidad. 
    Se utiliza para añadir nuevas funcionalidades a una función existente sin modificar su código origina

    Ejemplo:

        def mi_decorador(funcion):
            def nueva_funcion(*args, **kwargs):
                print("Se va a llamar la función")
                resultado = funcion(*args, **kwargs)  # llama a la función original
                print("La función se ha llamado")
                return resultado
            return nueva_funcion

        @mi_decorador
        def suma(a, b):
            print("Entra en la función suma")
            return a + b

        print(suma(5, 8))

    resultado:
        Se va a llamar la función
        Entra en la función suma
        La función se ha llamado
        17

 -------------------------------------------------------------------------------------------------------------------------
3. ¿Qué es una base de datos relacional?*

    Es una colección de información que organiza los datos en relaciones predefinidas donde los datos se almacenan en 
    una o más tablas (o "relaciones") de columnas y filas.
    Utiliza un lenguaje estructurado de consulta (SQL) para acceder y manipular los datos.

*Explica la diferencia entre una clave primaria y una clave foránea.*

    Clave primaria: Es un campo o conjunto de campos que identifica de manera única cada registro en una tabla.

    Clave foránea: Es un campo que establece una relación entre dos tablas, apuntando a la clave primaria de otra tabla, 
    garantizando la integridad referencial.

¿Cómo se realiza una consulta SELECT básica en MySQL?*

Una consulta SELECT básica se realiza con la siguiente sintaxis:

    SELECT columna1, columna2, .. FROM nombre_tabla WHERE condición;

    1. Selección de todas las columnas y todos los registros de una tabla:
        SELECT * FROM nombre_de_la_tabla;
        Este comando selecciona todas las columnas de la tabla especificada 1.

    2. Selección específica de columnas:
        SELECT columna1, columna2, columna3 FROM nombre_de_la_tabla;


 -------------------------------------------------------------------------------------------------------------------------

*4.¿Qué es una API y para qué se utiliza?*
Las API (Interfaz de Programación de Aplicaciones) 

funcionan como un intermediario de software, lo que permite que dos sistemas o aplicaciones se comuniquen entre sí. Es 
como un conjunto de reglas y protocolos que permiten la interacción entre diferentes componentes del software 
En una analogia podria verse como el mesero de un restaurante, ya que es el que tiene comunicacion con la cocina (backend) y el cliente (frontend). 

*Explica brevemente la diferencia entre una API REST y una API SOAP.*

    API REST (Representational State Transfer): Utiliza HTTP y se basa en recursos, utilizando métodos 
    como GET, POST, PUT, DELETE. Es más ligera, fácil de usar y cada petición contiene toda la información necesaria para entenderla 

    API SOAP (Simple Object Access Protocol): Utiliza el protocolo SOAP, Almacena información sobre el estado de la sesión en el servidor,  
    utiliza XML para transmitir mensajes y es más rígida y compleja, con 
    un enfoque en la seguridad y la transacción.

¿Qué son los métodos HTTP comunes utilizados en una API REST?*
    Los métodos HTTP comunes en una API REST incluyen:

    Los métodos HTTP más comunes utilizados en una API REST son:

        GET: Se utiliza para obtener información o recursos existentes sin modificarlos. Es el método más común y seguro.
        POST: Se utiliza para crear nuevos recursos o enviar datos al servidor.
        PUT: Se utiliza para actualizar completamente un recurso existente.
        DELETE: Se utiliza para eliminar un recurso específico.
        PATCH: Se utiliza para actualizar parcialmente un recurso existente.
        Estos métodos cubren las operaciones CRUD (Create, Read, Update, Delete) básicas que se necesitan para manejar recursos en una API REST.

        Algunos puntos clave sobre estos métodos:

            GET es el más seguro y se utiliza principalmente para obtener información.
            POST se utiliza para crear nuevos recursos, pero no es idempotente (no puede repetirse sin cambios).
            PUT y DELETE son idempotentes, lo que significa que pueden repetirse sin causar efectos secundarios.
            PATCH permite actualizar solo partes de un recurso, en lugar de reemplazarlo completamente como PUT.

